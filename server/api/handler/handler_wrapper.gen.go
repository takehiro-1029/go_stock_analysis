// Package handler provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package handler

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 株式データ取得
	// (GET /stock)
	AP01GetStock(w http.ResponseWriter, r *http.Request, params AP01GetStockParams)
	// 株式データ登録
	// (POST /stock)
	AP01PostStock(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AP01GetStock operation middleware
func (siw *ServerInterfaceWrapper) AP01GetStock(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AP01GetStockParams

	// ------------- Optional query parameter "symbol" -------------
	if paramValue := r.URL.Query().Get("symbol"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "symbol", r.URL.Query(), &params.Symbol)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter symbol: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.AP01GetStock(w, r.WithContext(ctx), params)
}

// AP01PostStock operation middleware
func (siw *ServerInterfaceWrapper) AP01PostStock(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	siw.Handler.AP01PostStock(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {

		r.Get("/stock", wrapper.AP01GetStock)
	})
	r.Group(func(r chi.Router) {

		r.Post("/stock", wrapper.AP01PostStock)
	})

	return r
}

