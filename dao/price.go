// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Price is an object representing the database table.
type Price struct {
	ID              string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	StockID         string    `boil:"stock_id" json:"stock_id" toml:"stock_id" yaml:"stock_id"`
	IntervalID      string    `boil:"interval_id" json:"interval_id" toml:"interval_id" yaml:"interval_id"`
	Open            float32   `boil:"open" json:"open" toml:"open" yaml:"open"`
	High            float32   `boil:"high" json:"high" toml:"high" yaml:"high"`
	Low             float32   `boil:"low" json:"low" toml:"low" yaml:"low"`
	Close           float32   `boil:"close" json:"close" toml:"close" yaml:"close"`
	Volume          uint      `boil:"volume" json:"volume" toml:"volume" yaml:"volume"`
	AcquisitionTime time.Time `boil:"acquisition_time" json:"acquisition_time" toml:"acquisition_time" yaml:"acquisition_time"`
	CreatedAt       time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *priceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L priceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PriceColumns = struct {
	ID              string
	StockID         string
	IntervalID      string
	Open            string
	High            string
	Low             string
	Close           string
	Volume          string
	AcquisitionTime string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "id",
	StockID:         "stock_id",
	IntervalID:      "interval_id",
	Open:            "open",
	High:            "high",
	Low:             "low",
	Close:           "close",
	Volume:          "volume",
	AcquisitionTime: "acquisition_time",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

// Generated where

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperuint struct{ field string }

func (w whereHelperuint) EQ(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint) NEQ(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint) LT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint) LTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint) GT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint) GTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint) IN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint) NIN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PriceWhere = struct {
	ID              whereHelperstring
	StockID         whereHelperstring
	IntervalID      whereHelperstring
	Open            whereHelperfloat32
	High            whereHelperfloat32
	Low             whereHelperfloat32
	Close           whereHelperfloat32
	Volume          whereHelperuint
	AcquisitionTime whereHelpertime_Time
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
}{
	ID:              whereHelperstring{field: "`price`.`id`"},
	StockID:         whereHelperstring{field: "`price`.`stock_id`"},
	IntervalID:      whereHelperstring{field: "`price`.`interval_id`"},
	Open:            whereHelperfloat32{field: "`price`.`open`"},
	High:            whereHelperfloat32{field: "`price`.`high`"},
	Low:             whereHelperfloat32{field: "`price`.`low`"},
	Close:           whereHelperfloat32{field: "`price`.`close`"},
	Volume:          whereHelperuint{field: "`price`.`volume`"},
	AcquisitionTime: whereHelpertime_Time{field: "`price`.`acquisition_time`"},
	CreatedAt:       whereHelpertime_Time{field: "`price`.`created_at`"},
	UpdatedAt:       whereHelpertime_Time{field: "`price`.`updated_at`"},
}

// PriceRels is where relationship names are stored.
var PriceRels = struct {
	Interval string
	Stock    string
}{
	Interval: "Interval",
	Stock:    "Stock",
}

// priceR is where relationships are stored.
type priceR struct {
	Interval *Interval `boil:"Interval" json:"Interval" toml:"Interval" yaml:"Interval"`
	Stock    *Stock    `boil:"Stock" json:"Stock" toml:"Stock" yaml:"Stock"`
}

// NewStruct creates a new relationship struct
func (*priceR) NewStruct() *priceR {
	return &priceR{}
}

// priceL is where Load methods for each relationship are stored.
type priceL struct{}

var (
	priceAllColumns            = []string{"id", "stock_id", "interval_id", "open", "high", "low", "close", "volume", "acquisition_time", "created_at", "updated_at"}
	priceColumnsWithoutDefault = []string{"id", "stock_id", "interval_id", "open", "high", "low", "close", "volume", "acquisition_time"}
	priceColumnsWithDefault    = []string{"created_at", "updated_at"}
	pricePrimaryKeyColumns     = []string{"id"}
)

type (
	// PriceSlice is an alias for a slice of pointers to Price.
	// This should generally be used opposed to []Price.
	PriceSlice []*Price
	// PriceHook is the signature for custom Price hook methods
	PriceHook func(context.Context, boil.ContextExecutor, *Price) error

	priceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	priceType                 = reflect.TypeOf(&Price{})
	priceMapping              = queries.MakeStructMapping(priceType)
	pricePrimaryKeyMapping, _ = queries.BindMapping(priceType, priceMapping, pricePrimaryKeyColumns)
	priceInsertCacheMut       sync.RWMutex
	priceInsertCache          = make(map[string]insertCache)
	priceUpdateCacheMut       sync.RWMutex
	priceUpdateCache          = make(map[string]updateCache)
	priceUpsertCacheMut       sync.RWMutex
	priceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var priceBeforeInsertHooks []PriceHook
var priceBeforeUpdateHooks []PriceHook
var priceBeforeDeleteHooks []PriceHook
var priceBeforeUpsertHooks []PriceHook

var priceAfterInsertHooks []PriceHook
var priceAfterSelectHooks []PriceHook
var priceAfterUpdateHooks []PriceHook
var priceAfterDeleteHooks []PriceHook
var priceAfterUpsertHooks []PriceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Price) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Price) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Price) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Price) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Price) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Price) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Price) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Price) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Price) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPriceHook registers your hook function for all future operations.
func AddPriceHook(hookPoint boil.HookPoint, priceHook PriceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		priceBeforeInsertHooks = append(priceBeforeInsertHooks, priceHook)
	case boil.BeforeUpdateHook:
		priceBeforeUpdateHooks = append(priceBeforeUpdateHooks, priceHook)
	case boil.BeforeDeleteHook:
		priceBeforeDeleteHooks = append(priceBeforeDeleteHooks, priceHook)
	case boil.BeforeUpsertHook:
		priceBeforeUpsertHooks = append(priceBeforeUpsertHooks, priceHook)
	case boil.AfterInsertHook:
		priceAfterInsertHooks = append(priceAfterInsertHooks, priceHook)
	case boil.AfterSelectHook:
		priceAfterSelectHooks = append(priceAfterSelectHooks, priceHook)
	case boil.AfterUpdateHook:
		priceAfterUpdateHooks = append(priceAfterUpdateHooks, priceHook)
	case boil.AfterDeleteHook:
		priceAfterDeleteHooks = append(priceAfterDeleteHooks, priceHook)
	case boil.AfterUpsertHook:
		priceAfterUpsertHooks = append(priceAfterUpsertHooks, priceHook)
	}
}

// One returns a single price record from the query.
func (q priceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Price, error) {
	o := &Price{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: failed to execute a one query for price")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Price records from the query.
func (q priceQuery) All(ctx context.Context, exec boil.ContextExecutor) (PriceSlice, error) {
	var o []*Price

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dao: failed to assign all query results to Price slice")
	}

	if len(priceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Price records in the query.
func (q priceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to count price rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q priceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dao: failed to check if price exists")
	}

	return count > 0, nil
}

// Interval pointed to by the foreign key.
func (o *Price) Interval(mods ...qm.QueryMod) intervalQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.IntervalID),
	}

	queryMods = append(queryMods, mods...)

	query := Intervals(queryMods...)
	queries.SetFrom(query.Query, "`intervals`")

	return query
}

// Stock pointed to by the foreign key.
func (o *Price) Stock(mods ...qm.QueryMod) stockQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.StockID),
	}

	queryMods = append(queryMods, mods...)

	query := Stocks(queryMods...)
	queries.SetFrom(query.Query, "`stocks`")

	return query
}

// LoadInterval allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (priceL) LoadInterval(ctx context.Context, e boil.ContextExecutor, singular bool, maybePrice interface{}, mods queries.Applicator) error {
	var slice []*Price
	var object *Price

	if singular {
		object = maybePrice.(*Price)
	} else {
		slice = *maybePrice.(*[]*Price)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &priceR{}
		}
		args = append(args, object.IntervalID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &priceR{}
			}

			for _, a := range args {
				if a == obj.IntervalID {
					continue Outer
				}
			}

			args = append(args, obj.IntervalID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`intervals`),
		qm.WhereIn(`intervals.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Interval")
	}

	var resultSlice []*Interval
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Interval")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for intervals")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for intervals")
	}

	if len(priceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Interval = foreign
		if foreign.R == nil {
			foreign.R = &intervalR{}
		}
		foreign.R.Prices = append(foreign.R.Prices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IntervalID == foreign.ID {
				local.R.Interval = foreign
				if foreign.R == nil {
					foreign.R = &intervalR{}
				}
				foreign.R.Prices = append(foreign.R.Prices, local)
				break
			}
		}
	}

	return nil
}

// LoadStock allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (priceL) LoadStock(ctx context.Context, e boil.ContextExecutor, singular bool, maybePrice interface{}, mods queries.Applicator) error {
	var slice []*Price
	var object *Price

	if singular {
		object = maybePrice.(*Price)
	} else {
		slice = *maybePrice.(*[]*Price)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &priceR{}
		}
		args = append(args, object.StockID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &priceR{}
			}

			for _, a := range args {
				if a == obj.StockID {
					continue Outer
				}
			}

			args = append(args, obj.StockID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stocks`),
		qm.WhereIn(`stocks.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Stock")
	}

	var resultSlice []*Stock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Stock")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stocks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stocks")
	}

	if len(priceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Stock = foreign
		if foreign.R == nil {
			foreign.R = &stockR{}
		}
		foreign.R.Prices = append(foreign.R.Prices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StockID == foreign.ID {
				local.R.Stock = foreign
				if foreign.R == nil {
					foreign.R = &stockR{}
				}
				foreign.R.Prices = append(foreign.R.Prices, local)
				break
			}
		}
	}

	return nil
}

// SetInterval of the price to the related item.
// Sets o.R.Interval to related.
// Adds o to related.R.Prices.
func (o *Price) SetInterval(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Interval) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `price` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"interval_id"}),
		strmangle.WhereClause("`", "`", 0, pricePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IntervalID = related.ID
	if o.R == nil {
		o.R = &priceR{
			Interval: related,
		}
	} else {
		o.R.Interval = related
	}

	if related.R == nil {
		related.R = &intervalR{
			Prices: PriceSlice{o},
		}
	} else {
		related.R.Prices = append(related.R.Prices, o)
	}

	return nil
}

// SetStock of the price to the related item.
// Sets o.R.Stock to related.
// Adds o to related.R.Prices.
func (o *Price) SetStock(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Stock) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `price` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"stock_id"}),
		strmangle.WhereClause("`", "`", 0, pricePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StockID = related.ID
	if o.R == nil {
		o.R = &priceR{
			Stock: related,
		}
	} else {
		o.R.Stock = related
	}

	if related.R == nil {
		related.R = &stockR{
			Prices: PriceSlice{o},
		}
	} else {
		related.R.Prices = append(related.R.Prices, o)
	}

	return nil
}

// Prices retrieves all the records using an executor.
func Prices(mods ...qm.QueryMod) priceQuery {
	mods = append(mods, qm.From("`price`"))
	return priceQuery{NewQuery(mods...)}
}

// FindPrice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPrice(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Price, error) {
	priceObj := &Price{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `price` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, priceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: unable to select from price")
	}

	return priceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Price) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no price provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(priceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	priceInsertCacheMut.RLock()
	cache, cached := priceInsertCache[key]
	priceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			priceAllColumns,
			priceColumnsWithDefault,
			priceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(priceType, priceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(priceType, priceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `price` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `price` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `price` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, pricePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dao: unable to insert into price")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dao: unable to populate default values for price")
	}

CacheNoHooks:
	if !cached {
		priceInsertCacheMut.Lock()
		priceInsertCache[key] = cache
		priceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Price.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Price) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	priceUpdateCacheMut.RLock()
	cache, cached := priceUpdateCache[key]
	priceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			priceAllColumns,
			pricePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dao: unable to update price, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `price` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, pricePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(priceType, priceMapping, append(wl, pricePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update price row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by update for price")
	}

	if !cached {
		priceUpdateCacheMut.Lock()
		priceUpdateCache[key] = cache
		priceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q priceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all for price")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected for price")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PriceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dao: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `price` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pricePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all in price slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected all in update all price")
	}
	return rowsAff, nil
}

var mySQLPriceUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Price) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no price provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(priceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPriceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	priceUpsertCacheMut.RLock()
	cache, cached := priceUpsertCache[key]
	priceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			priceAllColumns,
			priceColumnsWithDefault,
			priceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			priceAllColumns,
			pricePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dao: unable to upsert price, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`price`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `price` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(priceType, priceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(priceType, priceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dao: unable to upsert for price")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(priceType, priceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dao: unable to retrieve unique values for price")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dao: unable to populate default values for price")
	}

CacheNoHooks:
	if !cached {
		priceUpsertCacheMut.Lock()
		priceUpsertCache[key] = cache
		priceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Price record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Price) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dao: no Price provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pricePrimaryKeyMapping)
	sql := "DELETE FROM `price` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete from price")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by delete for price")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q priceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dao: no priceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from price")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for price")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PriceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(priceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `price` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pricePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from price slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for price")
	}

	if len(priceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Price) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPrice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PriceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PriceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `price`.* FROM `price` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pricePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dao: unable to reload all in PriceSlice")
	}

	*o = slice

	return nil
}

// PriceExists checks if the Price row exists.
func PriceExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `price` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dao: unable to check if price exists")
	}

	return exists, nil
}
